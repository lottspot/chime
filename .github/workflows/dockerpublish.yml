name: Docker

on:
  push:
    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: penn-chime
  DEPLOY_PUSH_BRANCH: develop
  # Required for action steebchen/kubectl
  KUBE_CONFIG_DATA: ${{ secrets.kubeconfig_data_preprod }}

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag image

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID="docker.pkg.github.com/${GITHUB_REPOSITORY,,}/${IMAGE_NAME}"

          # Common tag for all builds
          docker tag image $IMAGE_ID:${{ github.sha }}
          docker push $IMAGE_ID:${{ github.sha }}
          image_path=$IMAGE_ID:${{ github.sha }}
          imgpath_artifact=dev.txt

          # Tagged builds only
          if [[ ${{ github.ref }} == refs/tags/v* ]]; then
            # Strip git ref prefix from version
            VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

            # Strip "v" prefix from tag name
            [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

            echo IMAGE_ID=$IMAGE_ID
            echo VERSION=$VERSION

            # Publish tag
            docker tag image $IMAGE_ID:$VERSION
            docker push $IMAGE_ID:$VERSION

            # Publish preprod/prod tag
            if [[ ${{ github.ref }} == refs/tags/v*-rc.* ]]; then
              docker tag image $IMAGE_ID:preprod
              docker push $IMAGE_ID:preprod
              imgpath_artifact=preprod.txt
              echo pushed image for preprod
            else
              docker tag image $IMAGE_ID:prod
              docker push $IMAGE_ID:prod
              imgpath_artifact=prod.txt
              echo pushed image for prod
            fi
          fi

          echo "::set-env name=IMGPATH_ARTIFACT::$imgpath_artifact"
          cat <<EOF | tr -d '\n' > $imgpath_artifact
          $image_path
          EOF

      - name: Publish image registry path
        uses: actions/upload-artifact@v1
        with:
          name: image
          path: ${{ env.IMGPATH_ARTIFACT }}

  deploy-preprod:

    needs: push
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Needed for proper rebase
      - uses: azure/setup-kubectl@v1
        with:
          version: v1.18.0

      - name: Add kubeconfig to environment
        run: |
          set -e
          test -e ~/.kube || mkdir ~/.kube
          cat <<EOF > ~/.kube/config
          $(printf '%s' "$KUBE_CONFIG_DATA" | base64 -d)
          EOF

      - name: Get image registry path
        uses: actions/download-artifact@v1
        with:
          name: image

      - name: Deploy to preprod
        run: |
          set -e
          kubectl apply -Rf k8s.preprod
          kubectl -n chime set image --record deployment/chime chime="$(cat image/preprod.txt)"

      - name: Wait for deployment completion
        run: |
          set -e
          kubectl -n chime rollout status deployment.v1.apps/chime
          kubectl -n chime get deployment/chime -o yaml
